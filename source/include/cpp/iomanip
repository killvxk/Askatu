// -*- C++ -*-
/**
 * $Id$
 * Copyright (C) 2008 - 2014 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#pragma once

#include <impl/streams/ios.h>
#include <impl/streams/ios_ops.h>
#include <istream>
#include <ostream>

namespace std {
	struct setflagsobj {
		ios_base::fmtflags _mask;
		setflagsobj(ios_base::fmtflags mask)
			: _mask(mask) {
		}
	};
	inline std::ostream& operator<<(std::ostream& s,setflagsobj manip) {
		s.flags(manip._mask);
		return s;
	}
	inline std::istream& operator>>(std::istream& s,setflagsobj manip) {
		s.flags(manip._mask);
		return s;
	}

	struct resetflagsobj {
		ios_base::fmtflags _mask;
		resetflagsobj(ios_base::fmtflags mask)
			: _mask(mask) {
		}
	};
	inline std::ostream& operator<<(std::ostream& s,resetflagsobj manip) {
		s.setf(ios_base::fmtflags(0),manip._mask);
		return s;
	}
	inline std::istream& operator>>(std::istream& s,resetflagsobj manip) {
		s.setf(ios_base::fmtflags(0),manip._mask);
		return s;
	}

	struct setbaseobj {
		int _base;
		setbaseobj(int base)
			: _base(base) {
		}
	};
	inline std::ostream& operator<<(std::ostream& s,setbaseobj manip) {
		int base = manip._base;
		s.setf(base == 8 ? ios_base::oct
				: base == 10 ? ios_base::dec
				: base == 16 ? ios_base::hex
				: ios_base::fmtflags(0),ios_base::basefield);
		return s;
	}
	inline std::istream& operator>>(std::istream& s,setbaseobj manip) {
		int base = manip._base;
		s.setf(base == 8 ? ios_base::oct
				: base == 10 ? ios_base::dec
				: base == 16 ? ios_base::hex
				: ios_base::fmtflags(0),ios_base::basefield);
		return s;
	}

	struct setfillobj {
		char _fill;
		setfillobj(char c)
			: _fill(c) {
		}
	};
	inline std::ostream& operator<<(std::ostream& s,setfillobj manip) {
		s.fill(manip._fill);
		return s;
	}
	inline std::istream& operator>>(std::istream& s,setfillobj manip) {
		s.fill(manip._fill);
		return s;
	}

	struct setprecobj {
		int _prec;
		setprecobj(int prec)
			: _prec(prec) {
		}
	};
	inline std::ostream& operator<<(std::ostream& s,setprecobj manip) {
		s.precision(manip._prec);
		return s;
	}
	inline std::istream& operator>>(std::istream& s,setprecobj manip) {
		s.precision(manip._prec);
		return s;
	}

	struct setwobj {
		int _width;
		setwobj(int width)
			: _width(width) {
		}
	};
	inline std::ostream& operator<<(std::ostream& s,setwobj manip) {
		s.width(manip._width);
		return s;
	}
	inline std::istream& operator>>(std::istream& s,setwobj manip) {
		s.width(manip._width);
		return s;
	}

	inline resetflagsobj resetiosflags(ios_base::fmtflags mask) {
		return resetflagsobj(mask);
	}
	inline setflagsobj setiosflags(ios_base::fmtflags mask) {
		return setflagsobj(mask);
	}
	inline setbaseobj setbase(int base) {
		return setbaseobj(base);
	}
	inline setfillobj setfill(char c) {
		return setfillobj(c);
	}
	inline setprecobj setprecision(int n) {
		return setprecobj(n);
	}
	inline setwobj setw(int n) {
		return setwobj(n);
	}
}
