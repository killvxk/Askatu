// -*- C++ -*-
/**
 * $Id$
 * Copyright (C) 2008 - 2014 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#pragma once

#include <bits/c++config.h>
#include <iterator>
#include <stddef.h>
#include <algorithm>
#include <functional>
#include <limits.h>
#include <assert.h>

#include <impl/list/listnode.h>
#include <impl/list/listiterator.h>

namespace std {
	// forward declarations to implementation-details
	template<class T>
	class listnode;
	template<class T>
	class listiterator;
	template<class T>
	class const_listiterator;

	/**
	 * A double-linked-list
	 */
	template<class T>
	class list {
	public:
		typedef T value_type;
		typedef value_type& reference;
		typedef const value_type& const_reference;
		typedef value_type* pointer;
		typedef const value_type* const_pointer;
		typedef listiterator<T> iterator;
		typedef const_listiterator<T> const_iterator;
		typedef size_t size_type;
		typedef ptrdiff_t difference_type;
		typedef std::reverse_iterator<iterator> reverse_iterator;
		typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

		/**
		 * Creates an empty list
		 */
		explicit list()
			: _count(0), _first(), _last() {
		}
		/**
		 * Creates a list with <n> times <value> as elements
		 *
		 * @param n the number of elements
		 * @param value the value
		 */
		explicit list(size_type n,const T& value = T())
			: _count(0), _first(), _last() {
			insert(begin(),n,value);
		}
		/**
		 * Creates a list with the elements [<first> .. <last>)
		 *
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 */
		template<class InputIterator>
		list(InputIterator first,InputIterator last)
			: _count(0), _first(), _last() {
			insert(begin(),first,last);
		}
		/**
		 * Creates a copy from <x>
		 *
		 * @param x the list to copy
		 */
		list(const list<T>& x)
			: _count(0), _first(), _last() {
			insert(begin(),x.begin(),x.end());
		}
		/**
		 * Destructor
		 */
		~list() {
			clear();
		}

		/**
		 * Assign operator
		 *
		 * @param x the list to assign
		 * @return the list
		 */
		list<T>& operator =(const list<T>& x) {
			clear();
			insert(begin(),x.begin(),x.end());
			return *this;
		}
		/**
		 * Assigns the given range to this list
		 *
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 */
		template<class InputIterator>
		void assign(InputIterator first,InputIterator last) {
			clear();
			insert(begin(),first,last);
		}
		/**
		 * Assigns <n> times <value> to this list
		 *
		 * @param n the number of elements
		 * @param value the value
		 */
		void assign(size_type n,const T& t) {
			clear();
			insert(begin(),n,t);
		}

		/**
		 * @return the beginning of the list
		 */
		iterator begin() {
			return iterator(nullptr,_first);
		}
		/**
		 * @return the beginning of the list, as const-iterator
		 */
		const_iterator begin() const {
			return const_iterator(nullptr,_first);
		}
		/**
		 * @return the end of the list
		 */
		iterator end() {
			return iterator(_last,nullptr);
		}
		/**
		 * @return the end of the list, as const-iterator
		 */
		const_iterator end() const {
			return const_iterator(_last,nullptr);
		}
		/**
		 * @return the beginning of the list for the reverse-iterator (i.e. the end)
		 */
		reverse_iterator rbegin() {
			return reverse_iterator(end());
		}
		/**
		 * @return the beginning of the list for the const-reverse-iterator (i.e. the end)
		 */
		const_reverse_iterator rbegin() const {
			return const_reverse_iterator(end());
		}
		/**
		 * @return the end of the list for the reverse-iterator (i.e. the beginning)
		 */
		reverse_iterator rend() {
			return reverse_iterator(begin());
		}
		/**
		 * @return the end of the list for the const-reverse-iterator (i.e. the beginning)
		 */
		const_reverse_iterator rend() const {
			return const_reverse_iterator(begin());
		}

		/**
		 * @return whether the list is empty
		 */
		bool empty() const {
			return _count == 0;
		}
		/**
		 * @return the number of elements in the list
		 */
		size_type size() const {
			return _count;
		}
		/**
		 * @return the max number of elements supported
		 */
		size_type max_size() const {
			// TODO whats a usefull value here??
			return ULONG_MAX / sizeof(T);
		}
		/**
		 * Resizes the list so that it contains <sz> elements. If <sz> is less than the current
		 * number of elements, the elements at the end will be removed. If <sz> is greater than
		 * the current number of elements, it appends elements with <c> to the end.
		 *
		 * @param sz the size to reach
		 * @param c the fill-value
		 */
		void resize(size_type sz,T c = T()) {
			while(_count < sz)
				push_back(c);
			while(_count > sz)
				pop_back();
		}

		/**
		 * @return a reference to the first element
		 */
		reference front() {
			return *begin();
		}
		/**
		 * @return a const-reference to the first element
		 */
		const_reference front() const {
			return *begin();
		}
		/**
		 * @return a reference to the last element
		 */
		reference back() {
			return *--end();
		}
		/**
		 * @return a const-reference to the last element
		 */
		const_reference back() const {
			return *--end();
		}

		/**
		 * Inserts <x> at the beginning of the list
		 */
		void push_front(const T& x) {
			insert(begin(),x);
		}
		void push_front(T&& x) {
			insert(begin(),std::move(x));
		}
		/**
		 * Removes the first element of the list
		 */
		void pop_front() {
			erase(begin());
		}
		/**
		 * Inserts <x> at the end of the list
		 */
		void push_back(const T& x) {
			insert(end(),x);
		}
		void push_back(T&& x) {
			insert(end(),std::move(x));
		}
		/**
		 * Removes the last element of the list
		 */
		void pop_back() {
			erase(--end());
		}

		/**
		 * Inserts <x> at <position> into the list.
		 *
		 * @param position the position at which you want to insert
		 * @param x the value to insert
		 * @return the position of the inserted element
		 */
		iterator insert(iterator position,const T& x) {
			listnode<T>* node = position.node();
			listnode<T>* prev = position.prev();
			return insertNode(node,prev,new listnode<T>(prev,node,x));
		}
		/**
		 * Inserts <x> at <position> into the list.
		 *
		 * @param position the position at which you want to insert
		 * @param x the value to insert
		 * @return the position of the inserted element
		 */
		iterator insert(iterator position,T&& x) {
			listnode<T>* node = position.node();
			listnode<T>* prev = position.prev();
			return insertNode(node,prev,new listnode<T>(prev,node,std::move(x)));
		}

		/**
		 * Inserts <n> times <x> at <position> into the list.
		 *
		 * @param position the position at which you want to insert
		 * @param n the number of elements
		 * @param x the value to insert
		 */
		void insert(iterator position,size_type n,const T& x) {
			for(size_type i = 0; i < n; i++) {
				position = insert(position,x);
				position++;
			}
		}
		/**
		 * Inserts the range [<first> .. <last>) at <position> into the list
		 *
		 * @param position the position at which you want to insert
		 * @param first the first element to insert
		 * @param last the element behind the last one to insert
		 */
		template<class InputIterator>
		void insert(iterator position,InputIterator first,InputIterator last) {
			while(first != last) {
				position = insert(position,*first++);
				position++;
			}
		}

		/**
		 * Erases the element at <position>
		 *
		 * @param position the position of the element
		 * @return the position of the element behind the removed one
		 */
		iterator erase(iterator position) {
			listnode<T>* node = position.node();
			assert(node != nullptr);
			listnode<T>* next = node->next(), *prev = node->prev();
			if(!next)
				_last = prev;
			else
				next->prev(prev);
			if(!prev)
				_first = next;
			else
				prev->next(next);
			delete node;
			_count--;
			return iterator(prev,next);
		}
		/**
		 * Erases all elements in [<position> .. <last>)
		 *
		 * @param position the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 * @return the position after the removed range
		 */
		iterator erase(iterator position,iterator last) {
			while(position != last)
				position = erase(position);
			return position;
		}
		/**
		 * Removes all elements from the list
		 */
		void clear() {
			// free mem
			listnode<T>* node = _first;
			size_t c = _count;
			while(c-- > 0) {
				listnode<T> *tmp = node;
				node = node->next();
				delete tmp;
			}
			// reset
			_count = 0;
			_first = _last = nullptr;
		}

		/**
		 * Moves all elements from <x> at <position> into this list. I.e. the elements are
		 * removed from <x>.
		 *
		 * @param position the position where to insert
		 * @param x the list
		 */
		void splice(iterator position,list<T>& x) {
			splice(position,x,x.begin(),x.end());
		}
		/**
		 * Moves the element at <i> from <x> into this list. I.e. the element is removed from
		 * <x>.
		 *
		 * @param position the position where to insert
		 * @param x the list
		 * @param i the position of the element to move
		 */
		void splice(iterator position,list<T>& x,iterator i) {
			iterator e = i;
			splice(position,x,i,++e);
		}
		/**
		 * Moves the elements in range [<first> .. <last>) from <x> at <position> into this list.
		 * I.e. the elements are removed from <x>.
		 *
		 * @param position the position where to insert
		 * @param x the list
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 */
		void splice(iterator position,list<T>& x,iterator first,iterator last) {
			if(&x == this) {
				if(_count == 0)
					return;

				listnode<T>* pnode = position.node();
				listnode<T>* fnode = first.node();
				listnode<T>* lnode = last.prev();

				// remove
				if(fnode->prev())
					fnode->prev()->next(lnode->next());
				else
					_first = lnode->next();
				if(lnode->next())
					lnode->next()->prev(fnode->prev());
				else
					_last = fnode->prev();

				// insert
				if(pnode->prev())
					pnode->prev()->next(fnode);
				else
					_first = fnode;
				fnode->prev(pnode->prev());
				pnode->prev(lnode);
				if(lnode)
					lnode->next(pnode);
				else
					_last = pnode;
			}
			else {
				while(first != last) {
					position = insert(position,*first);
					first = x.erase(first);
					position++;
				}
			}
		}

		/**
		 * Removes all elements with value <value>
		 *
		 * @param value the value to remove
		 */
		void remove(const T& value) {
			for(iterator it = begin(); it != end(); ) {
				if(*it == value)
					it = erase(it);
				else
					it++;
			}
		}
		/**
		 * Removes all elements that fulfill the given predicate
		 *
		 * @param pred the predicate
		 */
		template<class Predicate>
		void remove_if(Predicate pred) {
			for(iterator it = begin(); it != end(); ) {
				if(pred(*it))
					it = erase(it);
				else
					it++;
			}
		}

		/**
		 * Removes duplicate elements. I.e. if element <i> is the same as <i+1>, <i> will be
		 * removed.
		 */
		void unique() {
			iterator it = begin();
			for(it++; it != end(); ) {
				if(*it == *(it - 1))
					it = erase(it);
				else
					it++;
			}
		}
		/**
		 * Removes elements that fulfill the given binary-predicate. I.e. if binary_pred(<i>,<i+1>)
		 * is true, <i> will be removed.
		 *
		 * @param binary_pred the predicate
		 */
		template<class BinaryPredicate>
		void unique(BinaryPredicate binary_pred) {
			iterator it = begin();
			for(it++; it != end(); ) {
				if(binary_pred(*it,*(it - 1)))
					it = erase(it);
				else
					it++;
			}
		}

		/**
		 * Merges all elements from <x> at the corresponding positions into this list. So it assumes
		 * that this list is sorted and inserts the elements in ascending order. They will be
		 * removed from <x>
		 *
		 * @param x the list
		 */
		void merge(list<T>& x) {
			merge(x,defaultCompare);
		}
		/**
		 * Merges all elements from <x> at the corresponding positions into this list by using
		 * the given compare-"function". So it assumes that this list is sorted and inserts the
		 * elements in the order given by the compare-"function". They will be removed from <x>
		 *
		 * @param x the list
		 * @param comp the compare-"function" (or object with operator() or whatever)
		 */
		template<class Compare>
		void merge(list<T>& x,Compare comp) {
			for(iterator xit = x.begin(); xit != x.end(); ) {
				iterator it = begin();
				for(; it != end(); it++) {
					if(comp(*xit,*it) < 0)
						break;
				}
				insert(it,*xit);
				xit = x.erase(xit);
			}
		}

		/**
		 * Sorts this list with default-compare-function
		 */
		void sort() {
			sort(less<T>());
		}
		/**
		 * Sorts this list with given compare-"function"
		 *
		 * @param comp the compare-"function" (or object with operator() or whatever)
		 */
		template<class Compare>
		void sort(Compare comp) {
			if(_count == 0)
				return;

			// bubblesort is enough for now :P
			iterator first = begin();
			iterator last = end();
			iterator lend = last - 1;
			size_t n = distance(first,last);
			bool swapped;
			do {
				swapped = false;
				for(iterator it = first; it != lend; it++) {
					value_type& t1 = *it;
					value_type& t2 = *(it + 1);
					// t1 > t2 <=> t2 < t1
					if(comp(t2,t1)) {
						std::swap(t1,t2);
						swapped = true;
					}
				}
			}
			while(swapped && n > 1);
		}

		/**
		 * Reverses this list, i.e. the elements will be in the opposite order afterwards. All
		 * iterators will remain valid.
		 */
		void reverse() {
			std::reverse(begin(),end());
		}
		/**
		 * Swaps <x> and <this>
		 *
		 * @param x the list
		 */
		void swap(list<T>& x) {
			std::swap<list<T> >(*this,x);
		}

	private:
		iterator insertNode(listnode<T>* node,listnode<T>* prev,listnode<T>* newnode) {
			if(prev)
				prev->next(newnode);
			else
				_first = newnode;
			if(node)
				node->prev(newnode);
			else
				_last = newnode;
			_count++;
			return newnode;
		}

		static T defaultCompare(T a,T b) {
			return a - b;
		}

		size_type _count;
		listnode<T> *_first;
		listnode<T> *_last;
	};

	// compare-operators
	template<class T>
	inline bool operator ==(const list<T>& x,const list<T>& y) {
		return x.size() == y.size() && std::equal(x.begin(),x.end(),y.begin());
	}
	template<class T>
	inline bool operator <(const list<T>& x,const list<T>& y) {
		return std::lexicographical_compare(x.begin(),x.end(),y.begin(),y.end());
	}
	template<class T>
	inline bool operator !=(const list<T>& x,const list<T>& y) {
		return !(x == y);
	}
	template<class T>
	inline bool operator >(const list<T>& x,const list<T>& y) {
		return y < x;
	}
	template<class T>
	inline bool operator >=(const list<T>& x,const list<T>& y) {
		return !(x < y);
	}
	template<class T>
	inline bool operator <=(const list<T>& x,const list<T>& y) {
		return !(y < x);
	}

	// specialized algorithms:
	template<class T>
	inline void swap(list<T>& x,list<T>& y) {
		x.swap(y);
	}
}
