// -*- C++ -*-
/**
 * $Id$
 * Copyright (C) 2008 - 2014 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#pragma once

#include <stddef.h>
#include <limits.h>
#include <iterator>
#include <stdexcept>
#include <algorithm>

namespace std {
	/**
	 * A ordered sequence of elements with random access
	 */
	template<class T>
	class vector {
	public:
		typedef T value_type;
		typedef value_type& reference;
		typedef const value_type& const_reference;
		typedef value_type* pointer;
		typedef const value_type* const_pointer;
		typedef pointer iterator;
		typedef const_pointer const_iterator;
		typedef size_t size_type;
		typedef ptrdiff_t difference_type;
		typedef std::reverse_iterator<iterator> reverse_iterator;
		typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

	private:
		/**
		 * Default size at the beginning
		 */
		static const size_type INITIAL_SIZE = 8;

	public:
		/**
		 * Creates an empty vector that has space for INITIAL_SIZE elements
		 */
		explicit vector()
			: _count(0), _size(INITIAL_SIZE), _elements(new T[INITIAL_SIZE]) {
		}
		/**
		 * Creates a vector with <n> times <value>
		 *
		 * @param n the number of elements
		 * @param value the value
		 */
		explicit vector(size_type n,const T& value = T())
			: _count(n), _size(n), _elements(new T[n]) {
			for(size_type i = 0; i < n; i++)
				_elements[i] = value;
		}
		/**
		 * Creates a vector from the range [<first> .. <last>)
		 *
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 */
		template<class InputIterator>
		vector(InputIterator first,InputIterator last)
			: _count(last - first), _size(last - first), _elements(new T[last - first]) {
			for(size_type i = 0; first < last; i++, first++)
				_elements[i] = *first;
		}
		/**
		 * Copy-constructor
		 */
		vector(const vector<T>& x)
			: _count(x._count), _size(x._count), _elements(new T[x._count]) {
			for(size_type i = 0; i < _count; i++)
				_elements[i] = x._elements[i];
		}
  		/**
  		 * Move constructor
  		 */
		vector(vector<T>&& x)
			: _count(x._count), _size(x._size), _elements(x._elements) {
			x._elements = nullptr;
		}
		/**
		 * Destructor
		 */
		~vector() {
			delete[] _elements;
		}

		/**
		 * Assignment-operator
		 *
		 * @param x the vector to assign
		 * @return *this
		 */
		vector<T>& operator =(const vector<T>& x) {
			delete[] _elements;
			_elements = new T[x._count];
			_count = x._count;
			_size = x._count;
			for(size_type i = 0; i < _count; i++)
				_elements[i] = x._elements[i];
			return *this;
		}
		/**
		 * Move assignment operator
		 */
		vector<T>& operator =(vector<T>&& x) {
			_count = x._count;
			_size = x._size;
			_elements = x._elements;
			x._elements = nullptr;
			return *this;
		}
		/**
		 * Assigns the given range [<first> .. <last>) to this vector
		 *
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 */
		template<class InputIterator>
		void assign(InputIterator first,InputIterator last) {
			delete[] _elements;
			size_type count = last - first;
			_elements = new T[count];
			_count = count;
			_size = count;
			for(size_type i = 0; first < last; i++, first++)
				_elements[i] = *first;
		}
		/**
		 * Assigns <n> times <u> to this vector
		 *
		 * @param n the number of elements
		 * @param u the value
		 */
		void assign(size_type n,const T& u) {
			delete[] _elements;
			_elements = new T[n];
			_count = n;
			_size = n;
			for(size_type i = 0; i < n; i++)
				_elements[i] = u;
		}

		/**
		 * @return the beginning of the list
		 */
		iterator begin() {
			return iterator(_elements);
		}
		/**
		 * @return the beginning of the list, as const-iterator
		 */
		const_iterator begin() const {
			return const_iterator(_elements);
		}
		/**
		 * @return the end of the list
		 */
		iterator end() {
			return iterator(_elements + _count);
		}
		/**
		 * @return the end of the list, as const-iterator
		 */
		const_iterator end() const {
			return const_iterator(_elements + _count);
		}
		/**
		 * @return the beginning of the list for the reverse-iterator (i.e. the end)
		 */
		reverse_iterator rbegin() {
			return reverse_iterator(_elements + _count);
		}
		/**
		 * @return the beginning of the list for the const-reverse-iterator (i.e. the end)
		 */
		const_reverse_iterator rbegin() const {
			return const_reverse_iterator(_elements + _count);
		}
		/**
		 * @return the end of the list for the reverse-iterator (i.e. the beginning)
		 */
		reverse_iterator rend() {
			return reverse_iterator(_elements);
		}
		/**
		 * @return the end of the list for the const-reverse-iterator (i.e. the beginning)
		 */
		const_reverse_iterator rend() const {
			return const_reverse_iterator(_elements);
		}

		/**
		 * @return the number of elements in the vector
		 */
		size_type size() const {
			return _count;
		}
		/**
		 * @return the max. number of supported elements
		 */
		size_type max_size() const {
			return ULONG_MAX / sizeof(T);
		}
		/**
		 * Resizes the list so that it contains <sz> elements. If <sz> is less than the current
		 * number of elements, the elements at the end will be removed. If <sz> is greater than
		 * the current number of elements, it appends elements with <c> to the end.
		 *
		 * @param sz the size to reach
		 * @param c the fill-value
		 */
		void resize(size_type sz,T c = T()) {
			if(sz < _count)
				_count = sz;
			else if(sz > _count)
				insert(_count,sz - _count,c);
		}
		/**
		 * @return the number of elements the vector can currently hold without aquiring more memory
		 */
		size_type capacity() const {
			return _size;
		}
		/**
		 * @return if the vector is empty
		 */
		bool empty() const {
			return _count == 0;
		}
		/**
		 * Ensures that the vector can hold <n> elements, i.e. capacity() will be at least <n>
		 * afterwards.
		 *
		 * @param n the capacity to reach
		 */
		void reserve(size_type n) {
			if(n > _size) {
				n = max(_size * 2,n);
				T *tmp = new T[n];
				for(size_type i = 0; i < _size; ++i)
					tmp[i] = _elements[i];
				delete[] _elements;
				_elements = tmp;
				_size = n;
			}
		}

		/**
		 * @param n the index
		 * @return a reference to element at index <n>. Does NOT perform a bounds-check!
		 */
		reference operator[](size_type n) {
			return _elements[n];
		}
		/**
		 * @param n the index
		 * @return a const-reference to element at index <n>. Does NOT perform a bounds-check!
		 */
		const_reference operator[](size_type n) const {
			return _elements[n];
		}
		/**
		 * @param n the index
		 * @return a reference to element at index <n>. Does perform a bounds-check!
		 * @throws out_of_range if the index is out of range
		 */
		reference at(size_type n) {
			if(n >= _count)
				throw out_of_range("Index out of range");
			return _elements[n];
		}
		/**
		 * @param n the index
		 * @return a const-reference to element at index <n>. Does perform a bounds-check!
		 * @throws out_of_range if the index is out of range
		 */
		const_reference at(size_type n) const {
			if(n >= _count)
				throw out_of_range("Index out of range");
			return _elements[n];
		}
		/**
		 * @return a reference to the first element in the vector
		 */
		reference front() {
			return _elements[0];
		}
		/**
		 * @return a const-reference to the first element in the vector
		 */
		const_reference front() const {
			return _elements[0];
		}
		/**
		 * @return a reference to the last element in the vector
		 */
		reference back() {
			return _elements[_count - 1];
		}
		/**
		 * @return a const-reference to the last element in the vector
		 */
		const_reference back() const {
			return _elements[_count - 1];
		}
		/**
		 * @return a pointer to the internal array
		 */
		pointer data() {
			return _elements;
		}
		/**
		 * @return a const-pointer to the internal array
		 */
		const_pointer data() const {
			return _elements;
		}

		/**
		 * Appends the given element
		 *
		 * @param x the value
		 */
		void push_back(const T& x) {
			reserve(_count + 1);
			_elements[_count++] = x;
		}
		/**
		 * Removes the last element from the vector
		 */
		void pop_back() {
			_count--;
		}
		/**
		 * Inserts <x> at <position> into the vector. I.e. [<position> .. <end()>) is moved
		 * one step forward and <x> is inserted at <position>.
		 *
		 * @param position the position where to insert
		 * @param x the element to insert
		 * @return the position where it has been inserted (may be different if new memory has been
		 * 	allocated)
		 */
		iterator insert(iterator position,const T& x) {
			size_type i = position - _elements;
			reserve(_count + 1);
			position = _elements + i;
			if(position < end()) {
				for(iterator pos = end() - 1; pos >= position; --pos)
					*(pos + 1) = *pos;
			}
			*position = x;
			_count++;
			return position;
		}
		/**
		 * Inserts <n> times <x> at <position> into the vector. I.e. [<position> .. <end()>) is
		 * moved <b> steps forward and the <x>'s are inserted at <position>.
		 *
		 * @param position the position where to insert
		 * @param n the number of elements to insert
		 * @param x the value
		 */
		void insert(iterator position,size_type n,const T& x) {
			size_type i = position - _elements;
			reserve(_count + n);
			position = _elements + i;
			if(position < end()) {
				for(iterator pos = end() - 1; pos >= position; --pos)
					*(pos + n) = *pos;
			}
			for(size_type j = 0; j < n; j++)
				*position++ = x;
			_count += n;
		}
		/**
		 * Inserts the range [<first> .. <last>) at <position> into the vector. I.e.
		 * [<position> .. <end()>) is moved <last> - <first> steps forward and the range is
		 * inserted at <position>.
		 *
		 * @param position the position where to insert
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 */
		template<class InputIterator>
		void insert(iterator position,InputIterator first,InputIterator last) {
			size_type i = position - _elements;
			size_type n = last - first;
			reserve(_count + n);
			position = _elements + i;
			if(position < end()) {
				for(iterator pos = end() - 1; pos >= position; --pos)
					*(pos + n) = *pos;
			}
			while(first < last)
				*position++ = *first++;
			_count += n;
		}
		/**
		 * Erases the element at <position>
		 *
		 * @param position the position of the element to remove
		 * @return the position of the next element (end() if it was the last)
		 */
		iterator erase(iterator position) {
			return erase(position,position + 1);
		}
		/**
		 * Erases the elements in [<first> .. <last>)
		 *
		 * @param first the start-position (inclusive)
		 * @param last the end-position (exclusive)
		 * @return the position of the next element (end() if it were the last elements)
		 */
		iterator erase(iterator first,iterator last) {
			size_type count = last - first;
			for(iterator pos = first; pos != last; ++pos)
				*pos = T();
			for(iterator pos = last; pos != end(); ++pos) {
				*(pos - count) = *pos;
				if(pos >= end() - count)
					*pos = T();
			}
			_count -= count;
			return first;
		}
		/**
		 * Removes the first item that matches x. This is a convenience method for:
		 * iterator it = find(begin(),end(),x);
		 * if(it != end())
		 * 	erase(it);
		 *
		 * @param x the element to erase
		 * @return true if successfull
		 */
		bool erase_first(const T& x) {
			iterator it = find(begin(),end(),x);
			if(it != end()) {
				erase(it);
				return true;
			}
			return false;
		}
		/**
		 * Swaps this vector with the given one
		 *
		 * @param x the vector
		 */
		void swap(vector<T>& v) {
			std::swap(_elements,v._elements);
			std::swap(_size,v._size);
			std::swap(_count,v._count);
		}
		/**
		 * Clears this vector, i.e. all elements are removed
		 */
		void clear() {
			delete[] _elements;
			_size = INITIAL_SIZE;
			_elements = new T[INITIAL_SIZE];
			_count = 0;
		}

	private:
		size_type _count;
		size_type _size;
		T* _elements;
	};

	// compare-operators
	template<class T>
	inline bool operator ==(const vector<T>& x,const vector<T>& y) {
		return compare(x,y) == 0;
	}
	template<class T>
	inline bool operator <(const vector<T>& x,const vector<T>& y) {
		return compare(x,y) < 0;
	}
	template<class T>
	inline bool operator !=(const vector<T>& x,const vector<T>& y) {
		return compare(x,y) != 0;
	}
	template<class T>
	inline bool operator >(const vector<T>& x,const vector<T>& y) {
		return compare(x,y) > 0;
	}
	template<class T>
	inline bool operator >=(const vector<T>& x,const vector<T>& y) {
		return compare(x,y) >= 0;
	}
	template<class T>
	inline bool operator <=(const vector<T>& x,const vector<T>& y) {
		return compare(x,y) <= 0;
	}

	// compare and swap
	template<class T>
	inline int compare(const vector<T>& x,const vector<T>& y) {
		if(x.size() != y.size())
			return x.size() - y.size();
		typename vector<T>::iterator it1,it2;
		for(it1 = x.begin(), it2 = y.begin(); it1 != x.end(); it1++, it2++) {
			if(*it1 != *it2)
				return *it1 - *it2;
		}
		return 0;
	}
	template<class T>
	inline void swap(vector<T>& x,vector<T>& y) {
		x.swap(y);
	}
}
